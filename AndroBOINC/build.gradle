apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    signingConfigs {
        release {
            // These are just dummy values here;
            // Create file signing.properties with real values for automatic signing
            // See signing.properties.template for details
            storeFile     file("~/.android/debug.keystore")
            storePassword "android"
            keyAlias      "androiddebugkey"
            keyPassword   "android"
        }
    }
    compileSdkVersion 33
    buildToolsVersion "33.0.1"
    defaultConfig {
        applicationId "sk.boinc.androboinc"
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 12
        versionName "6.10.58.rc6+230126"
        project.ext.set("archivesBaseName", archivesBaseName + "-" + defaultConfig.versionName)
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments (class: "sk.boinc.androboinc.suite.AndroidTestSuite")
    }
    buildTypes {
        release {
            buildConfigField 'boolean', 'DEBUG_INSERT_DELAYS', 'false'
            buildConfigField 'boolean', 'DEBUG_PERFORMANCE', 'false'
            buildConfigField 'boolean', 'DEBUG_DATA', 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        debug {
            buildConfigField 'boolean', 'DEBUG_INSERT_DELAYS', 'true'
            buildConfigField 'boolean', 'DEBUG_PERFORMANCE', 'false'
            buildConfigField 'boolean', 'DEBUG_DATA', 'false'
            debuggable true
            testCoverageEnabled true
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }
    productFlavors {
    }
    testOptions {
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                exceptionFormat 'full'
            }
        }
    }
}

dependencies {
    implementation project(':BoincRpc')

    // Unit testing dependencies
    testImplementation 'androidx.test:rules:1.5.0'
    testImplementation 'org.robolectric:robolectric:4.9.2'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    implementation "androidx.core:core-ktx:1.9.0"
    implementation 'androidx.annotation:annotation:1.5.0'
}

// Load signing configuration from external file
// if it exists and contains valid data
Properties props = new Properties()
def propFile = file('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if ((props != null) && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    }
    else {
        android.buildTypes.release.signingConfig = null
    }
}
else {
    android.buildTypes.release.signingConfig = null
}
repositories {
    mavenCentral()
}
